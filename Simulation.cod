//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbSettings
{
    float4x4 _ModelTransform;           // Offset:    0, size:   64
    float4x4 _VPTransform;              // Offset:   64, size:   64
    uint    _MaximumDusts;              // Offset:  128, size:    4
    float2  _Center;                    // Offset:  132, size:    8
    float   _Multiplier;                // Offset:  140, size:    4
    float   _DeltaTime;                 // Offset:  144, size:    4
    float   _Frames;                    // Offset:  148, size:    4
    float   _Scale;                     // Offset:  152, size:    4
}

cbuffer tileCollision
{
    float2  _TileSize;                  // Offset:    0, size:    8
    float2  _TileStartOffset;           // Offset:    8, size:    8
}

//
// 6 local object(s)
//
RWStructuredBuffer _dusts;
RWStructuredBuffer _dustsDeadList;
StructuredBuffer _dustsReadonly;
Texture2D _TileSDF;
Texture2D _DustTexture;
SamplerState _SamplerState
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 GPUSimulation
    {
        pass InitializeDeadList
        {
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64 [unused]
                //   uint _MaximumDusts;                // Offset:  128 Size:     4
                //   float2 _Center;                    // Offset:  132 Size:     8 [unused]
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4 [unused]
                //   float _Frames;                     // Offset:  148 Size:     4 [unused]
                //   float _Scale;                      // Offset:  152 Size:     4 [unused]
                //
                // }
                //
                // Resource bind info for _dustsDeadList
                // {
                //
                //   uint $Element;                     // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dustsDeadList                        UAV  struct         r/w             u1      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[9], immediateIndexed
                dcl_uav_structured u1, 4
                dcl_input vThreadID.x
                dcl_temps 1
                dcl_thread_group 256, 1, 1
                //
                // Initial variable locations:
                //   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
                //
                #line 85 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                uge r0.x, vThreadID.x, cb0[8].x
                if_nz r0.x
                  ret 
                endif 
                
                #line 86
                mov r0.x, l(1)
                iadd r0.x, r0.x, vThreadID.x
                store_structured u1.x, r0.x, l(0), vThreadID.x
                
                #line 87
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

        pass ComputeVelocity
        {
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64 [unused]
                //   uint _MaximumDusts;                // Offset:  128 Size:     4
                //   float2 _Center;                    // Offset:  132 Size:     8 [unused]
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4
                //   float _Frames;                     // Offset:  148 Size:     4 [unused]
                //   float _Scale;                      // Offset:  152 Size:     4 [unused]
                //
                // }
                //
                // Resource bind info for _dusts
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dusts                                UAV  struct         r/w             u0      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_uav_structured u0, 100
                dcl_input vThreadID.x
                dcl_temps 2
                dcl_thread_group 256, 1, 1
                //
                // Initial variable locations:
                //   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
                //
                #line 92 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                uge r0.x, vThreadID.x, cb0[8].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(0), u0.xxxx
                itof r0.z, l(0)
                eq r0.y, r0.z, r0.y
                or r0.x, r0.y, r0.x
                if_nz r0.x
                
                #line 93
                  ret 
                endif 
                
                #line 109
                itof r0.x, l(0)
                store_structured u0.x, vThreadID.x, l(20), r0.x
                store_structured u0.x, vThreadID.x, l(24), l(0.050000)
                
                #line 110
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(20), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(24), u0.xxxx
                mul r0.xy, r0.xyxx, cb0[9].xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(12), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(16), u0.xxxx
                add r0.xy, r0.xyxx, r1.xyxx
                store_structured u0.x, vThreadID.x, l(12), r0.x
                store_structured u0.x, vThreadID.x, l(16), r0.y
                
                #line 111
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(12), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(16), u0.xxxx
                dp2 r0.x, r0.xyxx, r0.xyxx
                sqrt r0.x, r0.x
                itof r0.y, l(8)
                lt r0.x, r0.y, r0.x
                if_nz r0.x
                
                #line 113
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(12), u0.xxxx
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(16), u0.xxxx
                  dp2 r0.z, r0.xyxx, r0.xyxx
                  rsq r0.z, r0.z
                  mul r0.xy, r0.zzzz, r0.xyxx
                  mul r0.xy, r0.xyxx, l(8.000000, 8.000000, 0.000000, 0.000000)
                  store_structured u0.x, vThreadID.x, l(12), r0.x
                  store_structured u0.x, vThreadID.x, l(16), r0.y
                
                #line 114
                endif 
                
                #line 115
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

        pass UpdatePosition
        {
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64 [unused]
                //   uint _MaximumDusts;                // Offset:  128 Size:     4
                //   float2 _Center;                    // Offset:  132 Size:     8 [unused]
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4
                //   float _Frames;                     // Offset:  148 Size:     4 [unused]
                //   float _Scale;                      // Offset:  152 Size:     4 [unused]
                //
                // }
                //
                // cbuffer tileCollision
                // {
                //
                //   float2 _TileSize;                  // Offset:    0 Size:     8
                //   float2 _TileStartOffset;           // Offset:    8 Size:     8
                //
                // }
                //
                // Resource bind info for _dusts
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _TileSDF                          texture  float4          2d             t1      1 
                // _dusts                                UAV  struct         r/w             u0      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                // tileCollision                     cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_constantbuffer CB1[1], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_uav_structured u0, 100
                dcl_input vThreadID.x
                dcl_temps 3
                dcl_thread_group 256, 1, 1
                //
                // Initial variable locations:
                //   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
                //
                #line 120 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                uge r0.x, vThreadID.x, cb0[8].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(0), u0.xxxx
                itof r0.z, l(0)
                eq r0.y, r0.z, r0.y
                or r0.x, r0.y, r0.x
                if_nz r0.x
                  ret 
                endif 
                
                #line 122
                itof r0.x, l(4)
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(96), u0.xxxx
                min r0.x, r0.y, r0.x
                ftoi r0.x, r0.x  // r0.x <- l
                
                #line 123
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(96), u0.xxxx
                add r0.y, r0.y, l(1.000000)
                store_structured u0.x, vThreadID.x, l(96), r0.y
                
                #line 124
                mov r0.x, r0.x  // r0.x <- i
                mov r0.y, r0.x  // r0.y <- i
                loop 
                  ige r0.z, r0.y, l(1)
                  breakc_z r0.z
                
                #line 126
                  imul null, r0.z, r0.y, l(8)
                  ineg r0.w, l(1)
                  iadd r0.w, r0.w, r0.y
                  imul null, r0.w, r0.w, l(8)
                  iadd r1.x, r0.w, l(56)
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, r1.x, u0.xxxx
                  iadd r0.w, r0.w, l(60)
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.w, vThreadID.x, r0.w, u0.xxxx
                  iadd r1.y, r0.z, l(56)
                  store_structured u0.x, vThreadID.x, r1.y, r1.x
                  iadd r0.z, r0.z, l(60)
                  store_structured u0.x, vThreadID.x, r0.z, r0.w
                
                #line 127
                  iadd r0.y, r0.y, l(-1)
                endloop 
                
                #line 128
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(4), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(8), u0.xxxx
                store_structured u0.x, vThreadID.x, l(56), r0.x
                store_structured u0.x, vThreadID.x, l(60), r0.y
                
                #line 130
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(4), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(8), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(12), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(16), u0.xxxx
                mul r0.zw, r1.xxxy, cb0[9].xxxx
                add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- posWS.x; r0.y <- posWS.y
                
                #line 131
                itof r0.z, l(16)
                mul r0.z, r0.z, cb1[0].z
                lt r0.z, r0.x, r0.z
                add r0.w, cb1[0].x, cb1[0].z
                itof r1.x, l(16)
                mul r0.w, r0.w, r1.x
                ge r0.w, r0.x, r0.w
                or r0.z, r0.w, r0.z
                itof r0.w, l(16)
                mul r0.w, r0.w, cb1[0].w
                lt r0.w, r0.y, r0.w
                or r0.z, r0.w, r0.z
                add r0.w, cb1[0].y, cb1[0].w
                itof r1.x, l(16)
                mul r0.w, r0.w, r1.x
                ge r0.w, r0.y, r0.w
                or r0.z, r0.w, r0.z
                if_nz r0.z
                
                #line 136
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(12), u0.xxxx
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(16), u0.xxxx
                  mul r0.zw, r1.xxxy, cb0[9].xxxx
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(4), u0.xxxx
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(8), u0.xxxx
                  add r0.zw, r0.zzzw, r1.xxxy
                  store_structured u0.x, vThreadID.x, l(4), r0.z
                  store_structured u0.x, vThreadID.x, l(8), r0.w
                
                #line 137
                  ret 
                
                #line 138
                endif 
                
                #line 140
                itof r0.zw, l(0, 0, 16, 16)
                mul r0.zw, r0.zzzw, cb1[0].zzzw
                mov r0.zw, -r0.zzzw
                add r0.xy, r0.zwzz, r0.xyxx
                ftoi r0.xy, r0.xyxx  // r0.x <- tileCoord.x; r0.y <- tileCoord.y
                
                #line 141
                mov r0.zw, l(0,0,0,0)
                ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyzw, t1.xyzw
                itof r1.y, l(0)
                lt r1.x, r1.x, r1.y
                if_nz r1.x
                
                #line 143
                  mov r0.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t1.xyzw  // r0.x <- prevs
                
                #line 144
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(4), u0.xxxx  // r1.x <- posWS.x
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(8), u0.xxxx  // r1.y <- posWS.y
                
                #line 145
                  itof r0.yz, l(0, 16, 16, 0)
                  mul r0.yz, r0.yyzy, cb1[0].zzwz
                  mov r0.yz, -r0.yyzy
                  add r0.yz, r0.yyzy, r1.xxyx
                  ftoi r1.xy, r0.yzyy  // r1.x <- tileCoord.x; r1.y <- tileCoord.y
                
                #line 147
                  mov r1.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r0.yz, r1.xyzw, t1.xyzw  // r0.y <- N.x; r0.z <- N.y
                
                #line 148
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(12), u0.xxxx  // r1.x <- v.x
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(16), u0.xxxx  // r1.y <- v.y
                
                #line 149
                  mul r0.xw, r0.xxxx, r0.yyyz
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.x, vThreadID.x, l(4), u0.xxxx
                  ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.y, vThreadID.x, l(8), u0.xxxx
                  mov r0.xw, -r0.xxxw
                  add r0.xw, r0.xxxw, r2.xxxy
                  store_structured u0.x, vThreadID.x, l(4), r0.x
                  store_structured u0.x, vThreadID.x, l(8), r0.w
                
                #line 151
                  dp2 r0.x, r1.xyxx, r0.yzyy
                  mul r0.xy, r0.yzyy, r0.xxxx  // r0.x <- vn.x; r0.y <- vn.y
                
                #line 152
                  mov r0.zw, -r0.xxxy
                  add r0.zw, r0.zzzw, r1.xxxy  // r0.z <- vt.x; r0.w <- vt.y
                
                #line 153
                  mul r0.xy, r0.xyxx, l(-0.900000, -0.900000, 0.000000, 0.000000)
                  mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.800000, 0.800000)
                  add r0.xy, r0.zwzz, r0.xyxx
                  store_structured u0.x, vThreadID.x, l(12), r0.x
                  store_structured u0.x, vThreadID.x, l(16), r0.y
                
                #line 154
                endif 
                
                #line 155
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(12), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, vThreadID.x, l(16), u0.xxxx
                mul r0.xy, r0.xyxx, cb0[9].xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(4), u0.xxxx
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, vThreadID.x, l(8), u0.xxxx
                add r0.xy, r0.xyxx, r1.xyxx
                store_structured u0.x, vThreadID.x, l(4), r0.x
                store_structured u0.x, vThreadID.x, l(8), r0.y
                
                #line 156
                ret 
                // Approximately 121 instruction slots used
                            
            };
        }

        pass SpawnDusts
        {
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64 [unused]
                //   uint _MaximumDusts;                // Offset:  128 Size:     4
                //   float2 _Center;                    // Offset:  132 Size:     8
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4 [unused]
                //   float _Frames;                     // Offset:  148 Size:     4
                //   float _Scale;                      // Offset:  152 Size:     4
                //
                // }
                //
                // Resource bind info for _dusts
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                // Resource bind info for _dustsDeadList
                // {
                //
                //   uint $Element;                     // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dusts                                UAV  struct         r/w             u0      1 
                // _dustsDeadList                        UAV  struct         r/w             u1      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_uav_structured u0, 100
                dcl_uav_structured u1, 4
                dcl_input vThreadID.xy
                dcl_temps 4
                dcl_thread_group 8, 8, 1
                //
                // Initial variable locations:
                //   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
                //
                #line 161 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, l(0.003906)
                imul null, r0.x, r0.x, vThreadID.x
                mov r0.y, l(0.000000)
                imul null, r0.y, r0.y, vThreadID.y
                iadd r0.x, r0.y, r0.x
                utof r0.x, r0.x
                itof r0.y, l(0x000186a7)
                mul r0.y, r0.y, cb0[9].y
                add r0.x, r0.y, r0.x
                ftou r0.x, r0.x  // r0.x <- rng_state
                
                #line 162
                nop 
                mov r0.x, r0.x
                
                #line 6 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\RNG.hlsl"
                imul null, r0.x, r0.x, l(0x2c9277b5)
                iadd r0.x, r0.x, l(0xac564b05)  // r0.x <- rng_state
                
                #line 162 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, r0.x  // r0.x <- rng_state
                
                #line 163
                nop 
                mov r0.x, r0.x
                
                #line 6 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\RNG.hlsl"
                imul null, r0.x, r0.x, l(0x2c9277b5)
                iadd r0.x, r0.x, l(0xac564b05)  // r0.x <- rng_state
                
                #line 163 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, r0.x  // r0.x <- rng_state
                
                #line 165
                nop 
                mov r0.x, r0.x
                
                #line 13 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\RNG.hlsl"
                nop 
                mov r0.x, r0.x
                
                #line 5
                mov r0.x, r0.x  // r0.x <- state
                
                #line 6
                imul null, r0.y, r0.x, l(0x2c9277b5)
                iadd r0.y, r0.y, l(0xac564b05)  // r0.y <- rng_state
                
                #line 7
                ushr r0.z, r0.x, l(28)
                iadd r0.z, r0.z, l(4)
                ushr r0.z, r0.x, r0.z
                xor r0.x, r0.x, r0.z
                imul null, r0.x, r0.x, l(0x108ef2d9)  // r0.x <- word
                
                #line 8
                ushr r0.z, r0.x, l(22)
                xor r0.x, r0.x, r0.z  // r0.x <- <rand_pcg return value>
                
                #line 13
                mov r0.y, r0.y  // r0.y <- rng_state
                utof r0.x, r0.x
                div r0.x, r0.x, l(4294967296.000000)  // r0.x <- <rand_float return value>
                
                #line 165 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.y, r0.y  // r0.y <- rng_state
                itof r0.z, l(2)
                mul r0.x, r0.z, r0.x
                itof r0.z, l(1)
                mov r0.z, -r0.z
                add r1.x, r0.z, r0.x  // r1.x <- x
                
                #line 166
                nop 
                mov r0.y, r0.y
                
                #line 13 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\RNG.hlsl"
                nop 
                mov r0.y, r0.y
                
                #line 5
                mov r0.y, r0.y  // r0.y <- state
                
                #line 6
                imul null, r0.x, r0.y, l(0x2c9277b5)
                iadd r0.x, r0.x, l(0xac564b05)  // r0.x <- rng_state
                
                #line 7
                ushr r0.z, r0.y, l(28)
                iadd r0.z, r0.z, l(4)
                ushr r0.z, r0.y, r0.z
                xor r0.y, r0.y, r0.z
                imul null, r0.y, r0.y, l(0x108ef2d9)  // r0.y <- word
                
                #line 8
                ushr r0.z, r0.y, l(22)
                xor r0.y, r0.y, r0.z  // r0.y <- <rand_pcg return value>
                
                #line 13
                mov r0.x, r0.x  // r0.x <- rng_state
                utof r0.y, r0.y
                div r0.y, r0.y, l(4294967296.000000)  // r0.y <- <rand_float return value>
                
                #line 166 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, r0.x  // r0.x <- rng_state
                itof r0.z, l(2)
                mul r0.y, r0.z, r0.y
                itof r0.z, l(1)
                mov r0.z, -r0.z
                add r1.y, r0.z, r0.y  // r1.y <- y
                
                #line 167
                nop 
                mov r0.x, r0.x
                
                #line 13 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\RNG.hlsl"
                nop 
                mov r0.x, r0.x
                
                #line 5
                mov r0.x, r0.x  // r0.x <- state
                
                #line 7
                ushr r0.y, r0.x, l(28)
                iadd r0.y, r0.y, l(4)
                ushr r0.y, r0.x, r0.y
                xor r0.x, r0.x, r0.y
                imul null, r0.x, r0.x, l(0x108ef2d9)  // r0.x <- word
                
                #line 8
                ushr r0.y, r0.x, l(22)
                xor r0.x, r0.x, r0.y  // r0.x <- <rand_pcg return value>
                
                #line 13
                utof r0.x, r0.x
                div r0.x, r0.x, l(4294967296.000000)  // r0.x <- <rand_float return value>
                
                #line 167 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                itof r0.y, l(2)
                mul r0.x, r0.y, r0.x
                mul r0.x, r0.x, l(3.141590)  // r0.x <- r
                
                #line 168
                nop 
                mul r0.yz, r1.xxyx, cb0[9].zzzz
                add r0.yz, r0.yyzy, cb0[8].yyzy
                sincos null, r1.x, r0.x
                sincos r1.y, null, r0.x
                mul r0.xw, r1.xxxy, l(16.000000, 0.000000, 0.000000, 16.000000)
                itof r1.xy, l(8, 8, 0, 0)
                
                #line 47
                mov r2.x, l(0)
                mov r2.y, l(0)
                imm_atomic_iadd r2.x, u1, r2.xyxx, l(1)  // r2.x <- prev
                
                #line 49
                ieq r1.z, r2.x, cb0[8].x
                if_nz r1.z
                
                #line 51
                  mov r3.x, l(0)
                  mov r3.y, l(0)
                  imm_atomic_exch r2.x, u1, r3.xyxx, cb0[8].x
                
                #line 53
                endif 
                
                #line 55
                if_z r1.z
                  mov r1.z, l(1)
                  iadd r1.z, r1.z, r2.x
                  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r1.z, r1.z, l(0), u1.xxxx  // r1.z <- nextId
                
                #line 56
                  itof r1.w, l(1)
                  store_structured u0.x, r1.z, l(0), r1.w
                
                #line 57
                  itof r1.w, l(0)
                  store_structured u0.x, r1.z, l(28), r1.w
                
                #line 58
                  store_structured u0.x, r1.z, l(4), r0.y
                  store_structured u0.x, r1.z, l(8), r0.z
                
                #line 59
                  store_structured u0.x, r1.z, l(12), r0.x
                  store_structured u0.x, r1.z, l(16), r0.w
                
                #line 60
                  itof r0.xy, l(0, 0, 0, 0)
                  store_structured u0.x, r1.z, l(20), r0.x
                  store_structured u0.x, r1.z, l(24), r0.y
                
                #line 61
                  itof r0.xyz, l(0, 0, 1, 0)
                  store_structured u0.x, r1.z, l(40), r0.x
                  store_structured u0.x, r1.z, l(44), r0.y
                  store_structured u0.x, r1.z, l(48), r0.z
                  store_structured u0.x, r1.z, l(52), l(0.333300)
                
                #line 62
                  store_structured u0.x, r1.z, l(32), r1.x
                  store_structured u0.x, r1.z, l(36), r1.y
                
                #line 63
                  itof r0.x, l(0)
                  store_structured u0.x, r1.z, l(96), r0.x
                endif 
                
                #line 169
                ret 
                // Approximately 125 instruction slots used
                            
            };
        }

    }

    technique11 GPUDraw
    {
        pass DrawDusts
        {
            ComputeShader = NULL;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // Resource bind info for _dustsReadonly
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dustsReadonly                    texture  struct         r/o             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xy          0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_resource_structured t0, 100
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.GPUInstanceId.x; v0.y <- input.GPUInstanceId.y; 
                //   o2.x <- <VertexShaderFunction return value>.Texcoord.x; o2.y <- <VertexShaderFunction return value>.Texcoord.y; 
                //   o1.x <- <VertexShaderFunction return value>.Color.x; o1.y <- <VertexShaderFunction return value>.Color.y; o1.z <- <VertexShaderFunction return value>.Color.z; o1.w <- <VertexShaderFunction return value>.Color.w; 
                //   o0.x <- <VertexShaderFunction return value>.Pos.x; o0.y <- <VertexShaderFunction return value>.Pos.y; o0.z <- <VertexShaderFunction return value>.Pos.z; o0.w <- <VertexShaderFunction return value>.Pos.w
                //
                #line 199 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, l(1)
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(4), t0.xxxx  // r1.y <- output.Pos.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(8), t0.xxxx  // r1.z <- output.Pos.z
                itof r1.xw, l(1, 0, 0, 1)  // r1.x <- output.Pos.x; r1.w <- output.Pos.w
                
                #line 200
                itof r0.xy, l(0, 0, 0, 0)  // r0.x <- output.Texcoord.x; r0.y <- output.Texcoord.y
                
                #line 201
                itof r2.xyzw, l(0, 0, 0, 0)  // r2.x <- output.Color.x; r2.y <- output.Color.y; r2.z <- output.Color.z; r2.w <- output.Color.w
                
                #line 202
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r2.xyzw
                mov o2.xy, r0.xyxx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _SamplerState                     sampler      NA          NA             s0      1 
                // _DustTexture                      texture  float4          2d             t1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   v2.x <- input.Texcoord.x; v2.y <- input.Texcoord.y; 
                //   o0.x <- <PixelShaderFunction return value>.x; o0.y <- <PixelShaderFunction return value>.y; o0.z <- <PixelShaderFunction return value>.z; o0.w <- <PixelShaderFunction return value>.w
                //
                #line 330 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                itof r0.x, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t1.xyzw, s0, r0.x
                mul o0.xyzw, r0.xyzw, v1.xyzw
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

        pass DrawDusts_Instanced
        {
            ComputeShader = NULL;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64
                //   uint _MaximumDusts;                // Offset:  128 Size:     4 [unused]
                //   float2 _Center;                    // Offset:  132 Size:     8 [unused]
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4 [unused]
                //   float _Frames;                     // Offset:  148 Size:     4 [unused]
                //   float _Scale;                      // Offset:  152 Size:     4 [unused]
                //
                // }
                //
                // Resource bind info for _dustsReadonly
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dustsReadonly                    texture  struct         r/o             t0      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xy          0     NONE   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                // SV_VertexID              0   x           2   VERTID    uint   x   
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_resource_structured t0, 100
                dcl_input v0.xy
                dcl_input_sgv v2.x, vertex_id
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.Position.x; v0.y <- input.Position.y; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   v2.x <- input.SubVertexId; 
                //   v3.x <- input.InstanceId; 
                //   o2.x <- <VertexShaderFunction_Instanced return value>.Texcoord.x; o2.y <- <VertexShaderFunction_Instanced return value>.Texcoord.y; 
                //   o1.x <- <VertexShaderFunction_Instanced return value>.Color.x; o1.y <- <VertexShaderFunction_Instanced return value>.Color.y; o1.z <- <VertexShaderFunction_Instanced return value>.Color.z; o1.w <- <VertexShaderFunction_Instanced return value>.Color.w; 
                //   o0.x <- <VertexShaderFunction_Instanced return value>.Pos.x; o0.y <- <VertexShaderFunction_Instanced return value>.Pos.y; o0.z <- <VertexShaderFunction_Instanced return value>.Pos.z; o0.w <- <VertexShaderFunction_Instanced return value>.Pos.w
                //
                #line 209 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, v3.x, l(0), t0.xxxx  // r0.x <- dust.isActive
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, v3.x, l(4), t0.xxxx  // r1.x <- dust.positionWS.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, v3.x, l(8), t0.xxxx  // r1.y <- dust.positionWS.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, v3.x, l(32), t0.xxxx  // r0.y <- dust.scale.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.z, v3.x, l(36), t0.xxxx  // r0.z <- dust.scale.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.x, v3.x, l(40), t0.xxxx  // r2.x <- dust.texCoords.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.y, v3.x, l(44), t0.xxxx  // r2.y <- dust.texCoords.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.z, v3.x, l(48), t0.xxxx  // r2.z <- dust.texCoords.z
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r3.y, v3.x, l(52), t0.xxxx  // r3.y <- dust.texCoords.w
                
                #line 210
                lt r0.x, l(0.000000), r0.x
                if_nz r0.x
                
                #line 212
                  mul r0.xy, r0.yzyy, v0.xyxx
                  itof r0.zw, l(0, 0, 0, 1)
                  itof r1.zw, l(0, 0, 0, 0)
                  add r4.xy, r1.xyxx, r0.xyxx
                  add r4.zw, r0.zzzw, r1.zzzw
                  dp4 r0.x, r4.xyzw, cb0[4].xyzw  // r0.x <- output.Pos.x
                  dp4 r0.y, r4.xyzw, cb0[5].xyzw  // r0.y <- output.Pos.y
                  dp4 r0.z, r4.xyzw, cb0[6].xyzw  // r0.z <- output.Pos.z
                  dp4 r0.w, r4.xyzw, cb0[7].xyzw  // r0.w <- output.Pos.w
                
                #line 213
                else   // Prior locations: r0.y <- dust.scale.x; r0.z <- dust.scale.y
                
                #line 216
                  itof r0.xyzw, l(0, 0, 0, 1)  // r0.x <- output.Pos.x; r0.y <- output.Pos.y; r0.z <- output.Pos.z; r0.w <- output.Pos.w
                
                #line 217
                endif 
                
                #line 218
                mov r2.xyz, r2.xyzx  // r2.x <- texCoord.x; r2.y <- texCoord.y; r2.z <- texCoord.z
                
                #line 219
                mov r1.x, l(4)
                udiv null, r1.x, v2.x, r1.x  // r1.x <- id
                
                #line 220
                if_z r1.x
                
                #line 222
                  mov r3.xy, r2.xyxx  // r3.x <- output.Texcoord.x; r3.y <- output.Texcoord.y
                
                #line 223
                else   // Prior locations: r3.y <- dust.texCoords.w
                
                #line 224
                  ieq r1.y, r1.x, l(1)
                  if_nz r1.y
                
                #line 226
                    mov r3.xy, r2.zyzz  // r3.x <- output.Texcoord.x; r3.y <- output.Texcoord.y
                
                #line 227
                  else   // Prior locations: r3.y <- dust.texCoords.w
                
                #line 228
                    ieq r1.x, r1.x, l(2)
                    if_nz r1.x
                
                #line 230
                      mov r3.x, r2.z  // r3.x <- output.Texcoord.x
                
                #line 231
                    else 
                
                #line 234
                      mov r3.x, r2.x  // r3.x <- output.Texcoord.x
                
                #line 235
                    endif 
                    mov r3.y, r3.y  // r3.y <- output.Texcoord.y
                  endif 
                endif 
                
                #line 236
                itof r1.xyzw, l(1, 1, 1, 1)  // r1.x <- output.Color.x; r1.y <- output.Color.y; r1.z <- output.Color.z; r1.w <- output.Color.w
                
                #line 237
                mov o0.xyzw, r0.xyzw
                mov o1.xyzw, r1.xyzw
                mov o2.xy, r3.xyxx
                ret 
                // Approximately 47 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _SamplerState                     sampler      NA          NA             s0      1 
                // _DustTexture                      texture  float4          2d             t1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   v2.x <- input.Texcoord.x; v2.y <- input.Texcoord.y; 
                //   o0.x <- <PixelShaderFunction return value>.x; o0.y <- <PixelShaderFunction return value>.y; o0.z <- <PixelShaderFunction return value>.z; o0.w <- <PixelShaderFunction return value>.w
                //
                #line 330 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                itof r0.x, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t1.xyzw, s0, r0.x
                mul o0.xyzw, r0.xyzw, v1.xyzw
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

        pass DrawDusts_Billboard
        {
            ComputeShader = NULL;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xy          0     NONE   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // SV_VertexID              0   x           2   VERTID    uint       
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // TEXCOORD                 0   x           0     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v3.x, instance_id
                dcl_output o0.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.Position.x; v0.y <- input.Position.y; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   v2.x <- input.SubVertexId; 
                //   v3.x <- input.InstanceId; 
                //   o0.x <- <VertexShaderFunction_Billboard return value>
                //
                #line 244 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov r0.x, v3.x  // r0.x <- output
                
                #line 245
                mov o0.x, r0.x
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float4x4 _ModelTransform;          // Offset:    0 Size:    64 [unused]
                //   float4x4 _VPTransform;             // Offset:   64 Size:    64
                //   uint _MaximumDusts;                // Offset:  128 Size:     4 [unused]
                //   float2 _Center;                    // Offset:  132 Size:     8 [unused]
                //   float _Multiplier;                 // Offset:  140 Size:     4 [unused]
                //   float _DeltaTime;                  // Offset:  144 Size:     4 [unused]
                //   float _Frames;                     // Offset:  148 Size:     4 [unused]
                //   float _Scale;                      // Offset:  152 Size:     4 [unused]
                //
                // }
                //
                // Resource bind info for _dustsReadonly
                // {
                //
                //   struct Dust2D
                //   {
                //       
                //       float isActive;                // Offset:    0
                //       float2 positionWS;             // Offset:    4
                //       float2 velocity;               // Offset:   12
                //       float2 force;                  // Offset:   20
                //       float rotation;                // Offset:   28
                //       float2 scale;                  // Offset:   32
                //       float4 texCoords;              // Offset:   40
                //       float2 oldPos[5];              // Offset:   56
                //       float oldPosSize;              // Offset:   96
                //
                //   } $Element;                        // Offset:    0 Size:   100
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _dustsReadonly                    texture  struct         r/o             t0      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // TEXCOORD                 0   x           0     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_resource_structured t0, 100
                dcl_input v[1][0].x
                dcl_temps 12
                dcl_indexableTemp x0[4], 4
                dcl_indexableTemp x1[12], 4
                dcl_indexableTemp x2[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_maxout 24
                //
                // Initial variable locations:
                //   m0 <- triangleStream; 
                //   v[0][0].x <- gIn; 
                //   x1 <- mainOutput; x2 <- texCoordsCorners
                //
                #line 27 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                mov x0[0].xy, l(-0.500000,0.500000,0,0)
                mov x0[1].xy, l(-0.500000,-0.500000,0,0)
                mov x0[2].xy, l(0.500000,0.500000,0,0)
                mov x0[3].xy, l(0.500000,-0.500000,0,0)
                
                #line 251
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.x, v[0][0].x, l(0), t0.xxxx  // r0.x <- dust.isActive
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.x, v[0][0].x, l(4), t0.xxxx  // r1.x <- dust.positionWS.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r1.y, v[0][0].x, l(8), t0.xxxx  // r1.y <- dust.positionWS.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.x, v[0][0].x, l(12), t0.xxxx  // r2.x <- dust.velocity.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r2.y, v[0][0].x, l(16), t0.xxxx  // r2.y <- dust.velocity.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r3.x, v[0][0].x, l(32), t0.xxxx  // r3.x <- dust.scale.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r3.y, v[0][0].x, l(36), t0.xxxx  // r3.y <- dust.scale.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.y, v[0][0].x, l(40), t0.xxxx  // r0.y <- dust.texCoords.x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r4.x, v[0][0].x, l(44), t0.xxxx  // r4.x <- dust.texCoords.y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r4.y, v[0][0].x, l(48), t0.xxxx  // r4.y <- dust.texCoords.z
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r4.z, v[0][0].x, l(52), t0.xxxx  // r4.z <- dust.texCoords.w
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r5.x, v[0][0].x, l(56), t0.xxxx  // r5.x <- dust.oldPos[0].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r5.y, v[0][0].x, l(60), t0.xxxx  // r5.y <- dust.oldPos[0].y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r6.x, v[0][0].x, l(64), t0.xxxx  // r6.x <- dust.oldPos[1].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r6.y, v[0][0].x, l(68), t0.xxxx  // r6.y <- dust.oldPos[1].y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r7.x, v[0][0].x, l(72), t0.xxxx  // r7.x <- dust.oldPos[2].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r7.y, v[0][0].x, l(76), t0.xxxx  // r7.y <- dust.oldPos[2].y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r8.x, v[0][0].x, l(80), t0.xxxx  // r8.x <- dust.oldPos[3].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r8.y, v[0][0].x, l(84), t0.xxxx  // r8.y <- dust.oldPos[3].y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r9.x, v[0][0].x, l(88), t0.xxxx  // r9.x <- dust.oldPos[4].x
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r9.y, v[0][0].x, l(92), t0.xxxx  // r9.y <- dust.oldPos[4].y
                ld_structured_indexable(structured_buffer, stride=100)(mixed,mixed,mixed,mixed) r0.z, v[0][0].x, l(96), t0.xxxx  // r0.z <- dust.oldPosSize
                
                #line 252
                eq r0.x, r0.x, l(0.000000)
                if_nz r0.x
                
                #line 253
                  ret 
                endif 
                
                #line 256
                mov r0.w, r4.z
                mov x2[0].xy, r0.ywyy
                mov x2[1].xy, r0.yyyy
                mov x2[2].xy, r4.yzyy
                mov x2[3].xy, r4.yxyy
                
                #line 267
                mov r0.xy, x0[0].xyxx
                mul r0.xy, r3.xyxx, r0.xyxx
                add r4.xy, r1.xyxx, r0.xyxx
                itof r4.zw, l(0, 0, 0, 1)
                dp4 r10.x, r4.xyzw, cb0[4].xyzw
                dp4 r10.y, r4.xyzw, cb0[5].xyzw
                dp4 r10.z, r4.xyzw, cb0[6].xyzw
                dp4 r10.w, r4.xyzw, cb0[7].xyzw
                mov x1[0].xyzw, r10.xyzw
                
                #line 268
                itof r4.xyzw, l(1, 1, 1, 1)
                mov x1[1].xyzw, r4.xyzw
                
                #line 269
                mov r0.xy, x2[0].xyxx
                mov x1[2].xy, r0.xyxx
                
                #line 270
                mov r4.xyzw, x1[0].xyzw
                mov r10.xyzw, x1[1].xyzw
                mov r0.xy, x1[2].xyxx
                mov o0.xyzw, r4.xyzw
                mov o1.xyzw, r10.xyzw
                mov o2.xy, r0.xyxx
                emit_stream m0
                
                #line 267
                mov r0.xy, x0[1].xyxx
                mul r0.xy, r3.xyxx, r0.xyxx
                add r4.xy, r1.xyxx, r0.xyxx
                itof r4.zw, l(0, 0, 0, 1)
                dp4 r10.x, r4.xyzw, cb0[4].xyzw
                dp4 r10.y, r4.xyzw, cb0[5].xyzw
                dp4 r10.z, r4.xyzw, cb0[6].xyzw
                dp4 r10.w, r4.xyzw, cb0[7].xyzw
                mov x1[3].xyzw, r10.xyzw
                
                #line 268
                itof r4.xyzw, l(1, 1, 1, 1)
                mov x1[4].xyzw, r4.xyzw
                
                #line 269
                mov r0.xy, x2[1].xyxx
                mov x1[5].xy, r0.xyxx
                
                #line 270
                mov r4.xyzw, x1[3].xyzw
                mov r10.xyzw, x1[4].xyzw
                mov r0.xy, x1[5].xyxx
                mov o0.xyzw, r4.xyzw
                mov o1.xyzw, r10.xyzw
                mov o2.xy, r0.xyxx
                emit_stream m0
                
                #line 267
                mov r0.xy, x0[2].xyxx
                mul r0.xy, r3.xyxx, r0.xyxx
                add r4.xy, r1.xyxx, r0.xyxx
                itof r4.zw, l(0, 0, 0, 1)
                dp4 r10.x, r4.xyzw, cb0[4].xyzw
                dp4 r10.y, r4.xyzw, cb0[5].xyzw
                dp4 r10.z, r4.xyzw, cb0[6].xyzw
                dp4 r10.w, r4.xyzw, cb0[7].xyzw
                mov x1[6].xyzw, r10.xyzw
                
                #line 268
                itof r4.xyzw, l(1, 1, 1, 1)
                mov x1[7].xyzw, r4.xyzw
                
                #line 269
                mov r0.xy, x2[2].xyxx
                mov x1[8].xy, r0.xyxx
                
                #line 270
                mov r4.xyzw, x1[6].xyzw
                mov r10.xyzw, x1[7].xyzw
                mov r0.xy, x1[8].xyxx
                mov o0.xyzw, r4.xyzw
                mov o1.xyzw, r10.xyzw
                mov o2.xy, r0.xyxx
                emit_stream m0
                
                #line 267
                mov r0.xy, x0[3].xyxx
                mul r0.xy, r3.xyxx, r0.xyxx
                add r1.xy, r1.xyxx, r0.xyxx
                itof r1.zw, l(0, 0, 0, 1)
                dp4 r4.x, r1.xyzw, cb0[4].xyzw
                dp4 r4.y, r1.xyzw, cb0[5].xyzw
                dp4 r4.z, r1.xyzw, cb0[6].xyzw
                dp4 r4.w, r1.xyzw, cb0[7].xyzw
                mov x1[9].xyzw, r4.xyzw
                
                #line 268
                itof r1.xyzw, l(1, 1, 1, 1)
                mov x1[10].xyzw, r1.xyzw
                
                #line 269
                mov r0.xy, x2[3].xyxx
                mov x1[11].xy, r0.xyxx
                
                #line 270
                mov r1.xyzw, x1[9].xyzw
                mov r4.xyzw, x1[10].xyzw
                mov r0.xy, x1[11].xyxx
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r4.xyzw
                mov o2.xy, r0.xyxx
                emit_stream m0
                
                #line 272
                cut_stream m0
                
                #line 274
                itof r0.x, l(2)
                lt r0.x, r0.z, r0.x
                if_nz r0.x
                
                #line 275
                  ret 
                endif 
                
                #line 292
                mov r0.x, l(0)  // r0.x <- k
                mov r0.y, r0.x  // r0.y <- k
                loop 
                  itof r0.w, r0.y
                  itof r1.x, l(5)
                  min r1.x, r0.z, r1.x
                  lt r0.w, r0.w, r1.x
                  breakc_z r0.w
                
                #line 294
                  mov r1.xy, r2.xyxx  // r1.x <- v1.x; r1.y <- v1.y
                
                #line 296
                  ilt r0.w, l(0), r0.y
                  if_nz r0.w
                    mov r0.w, r0.y  // r0.w <- k
                
                #line 298
                    ineg r1.z, l(1)
                    iadd r1.z, r0.w, r1.z
                    ieq r4.xyzw, r1.zzzz, l(1, 2, 3, 4)
                    ieq r1.z, r1.z, l(0)
                    and r1.z, r1.z, l(0x3f800000)
                    and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
                    mul r1.zw, r5.xxxy, r1.zzzz
                    add r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    mul r2.zw, r6.xxxy, r4.xxxx
                    add r1.zw, r1.zzzw, r2.zzzw
                    mul r2.zw, r7.xxxy, r4.yyyy
                    add r1.zw, r1.zzzw, r2.zzzw
                    mul r2.zw, r8.xxxy, r4.zzzz
                    add r1.zw, r1.zzzw, r2.zzzw
                    mul r2.zw, r9.xxxy, r4.wwww
                    add r1.zw, r1.zzzw, r2.zzzw
                    ieq r4.xyzw, r0.wwww, l(1, 2, 3, 4)
                    ieq r0.w, r0.w, l(0)
                    and r0.w, r0.w, l(0x3f800000)
                    and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
                    mul r2.zw, r5.xxxy, r0.wwww
                    add r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    mul r3.zw, r6.xxxy, r4.xxxx
                    add r2.zw, r2.zzzw, r3.zzzw
                    mul r3.zw, r7.xxxy, r4.yyyy
                    add r2.zw, r2.zzzw, r3.zzzw
                    mul r3.zw, r8.xxxy, r4.zzzz
                    add r2.zw, r2.zzzw, r3.zzzw
                    mul r3.zw, r9.xxxy, r4.wwww
                    add r2.zw, r2.zzzw, r3.zzzw
                    mov r2.zw, -r2.zzzw
                    add r1.xy, r1.zwzz, r2.zwzz
                
                #line 299
                  endif 
                
                #line 301
                  dp2 r0.w, r1.xyxx, r1.xyxx
                  rsq r0.w, r0.w
                  mul r1.xy, r0.wwww, r1.yxyy  // r1.x <- tangent.y; r1.y <- tangent.x
                
                #line 302
                  mov r1.x, -r1.x  // r1.x <- tangent.x
                  mov r1.y, r1.y  // r1.y <- tangent.y
                
                #line 305
                  itof r0.w, r0.y
                  div r0.w, r0.w, l(4.000000)
                  mov r1.z, l(-0.800000)
                  add r1.z, r1.z, l(0.100000)
                  mul r0.w, r0.w, r1.z
                  add r4.x, r0.w, l(0.800000)  // r4.x <- f
                
                #line 307
                  mul r1.zw, r3.xxxy, r1.xxxy
                  mul r1.zw, r4.xxxx, r1.zzzw
                  ieq r10.xyzw, r0.yyyy, l(1, 2, 3, 4)
                  ieq r0.w, r0.y, l(0)
                  and r0.w, r0.w, l(0x3f800000)
                  and r10.xyzw, r10.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
                  mul r2.zw, r5.xxxy, r0.wwww
                  add r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                  mul r3.zw, r6.xxxy, r10.xxxx
                  add r2.zw, r2.zzzw, r3.zzzw
                  mul r3.zw, r7.xxxy, r10.yyyy
                  add r2.zw, r2.zzzw, r3.zzzw
                  mul r3.zw, r8.xxxy, r10.zzzz
                  add r2.zw, r2.zzzw, r3.zzzw
                  mul r3.zw, r9.xxxy, r10.wwww
                  add r2.zw, r2.zzzw, r3.zzzw
                  add r10.xy, r1.zwzz, r2.zwzz
                  itof r10.zw, l(0, 0, 0, 1)
                  dp4 r11.x, r10.xyzw, cb0[4].xyzw
                  dp4 r11.y, r10.xyzw, cb0[5].xyzw
                  dp4 r11.z, r10.xyzw, cb0[6].xyzw
                  dp4 r11.w, r10.xyzw, cb0[7].xyzw
                  mov x1[0].xyzw, r11.xyzw
                
                #line 309
                  itof r4.y, l(1)
                  mov x1[1].xyzw, r4.xxxy
                
                #line 310
                  mov x1[2].xy, l(0.500000,0.500000,0,0)
                
                #line 311
                  mov r10.xyzw, x1[0].xyzw
                  mov r11.xyzw, x1[1].xyzw
                  mov r1.zw, x1[2].xxxy
                  mov o0.xyzw, r10.xyzw
                  mov o1.xyzw, r11.xyzw
                  mov o2.xy, r1.zwzz
                  emit_stream m0
                
                #line 313
                  mov r1.xy, -r1.xyxx
                  mul r1.xy, r3.xyxx, r1.xyxx
                  mul r1.xy, r4.xxxx, r1.xyxx
                  ieq r10.xyzw, r0.yyyy, l(1, 2, 3, 4)
                  ieq r0.w, r0.y, l(0)
                  and r0.w, r0.w, l(0x3f800000)
                  and r10.xyzw, r10.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
                  mul r1.zw, r5.xxxy, r0.wwww
                  add r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                  mul r2.zw, r6.xxxy, r10.xxxx
                  add r1.zw, r1.zzzw, r2.zzzw
                  mul r2.zw, r7.xxxy, r10.yyyy
                  add r1.zw, r1.zzzw, r2.zzzw
                  mul r2.zw, r8.xxxy, r10.zzzz
                  add r1.zw, r1.zzzw, r2.zzzw
                  mul r2.zw, r9.xxxy, r10.wwww
                  add r1.zw, r1.zzzw, r2.zzzw
                  add r1.xy, r1.zwzz, r1.xyxx
                  itof r1.zw, l(0, 0, 0, 1)
                  dp4 r10.x, r1.xyzw, cb0[4].xyzw
                  dp4 r10.y, r1.xyzw, cb0[5].xyzw
                  dp4 r10.z, r1.xyzw, cb0[6].xyzw
                  dp4 r10.w, r1.xyzw, cb0[7].xyzw
                  mov x1[3].xyzw, r10.xyzw
                
                #line 315
                  itof r4.z, l(1)
                  mov x1[4].xyzw, r4.xxxz
                
                #line 316
                  mov x1[5].xy, l(0.500000,0.500000,0,0)
                
                #line 317
                  mov r1.xyzw, x1[3].xyzw
                  mov r4.xyzw, x1[4].xyzw
                  mov r2.zw, x1[5].xxxy
                  mov o0.xyzw, r1.xyzw
                  mov o1.xyzw, r4.xyzw
                  mov o2.xy, r2.zwzz
                  emit_stream m0
                
                #line 318
                  iadd r0.y, r0.y, l(1)  // r0.y <- k
                endloop 
                
                #line 319
                ret 
                // Approximately 247 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _SamplerState                     sampler      NA          NA             s0      1 
                // _DustTexture                      texture  float4          2d             t1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   v2.x <- input.Texcoord.x; v2.y <- input.Texcoord.y; 
                //   o0.x <- <PixelShaderFunction return value>.x; o0.y <- <PixelShaderFunction return value>.y; o0.z <- <PixelShaderFunction return value>.z; o0.w <- <PixelShaderFunction return value>.w
                //
                #line 330 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\Simulation.fx"
                itof r0.x, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t1.xyzw, s0, r0.x
                mul o0.xyzw, r0.xyzw, v1.xyzw
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

        pass Reset
        {
            ComputeShader = NULL;
            GeometryShader = NULL;
        }

    }

}

