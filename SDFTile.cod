//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbSettings
{
    float2  _TileSize;                  // Offset:    0, size:    8
    float2  _TileStartOffset;           // Offset:    8, size:    8
}

//
// 2 local object(s)
//
Texture2D _TileMap;
RWTexture2D _TileSDF;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 SDFTile
    {
        pass SDF3x3_TGSM
        {
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float2 _TileSize;                  // Offset:    0 Size:     8
                //   float2 _TileStartOffset;           // Offset:    8 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // _TileMap                          texture  float4          2d             t0      1 
                // _TileSDF                              UAV  float4          2d             u0      1 
                // cbSettings                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadGroupID.xy
                dcl_input vThreadIDInGroup.xy
                dcl_input vThreadID.xy
                dcl_temps 6
                dcl_indexableTemp x0[9], 4
                dcl_tgsm_structured g0, 4, 9
                dcl_tgsm_raw g1, 4
                dcl_tgsm_raw g2, 4
                dcl_thread_group 16, 16, 1
                //
                // Initial variable locations:
                //   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z; 
                //   vThreadGroupID.x <- gid.x; vThreadGroupID.y <- gid.y; vThreadGroupID.z <- gid.z; 
                //   vThreadIDInGroup.x <- tid.x; vThreadIDInGroup.y <- tid.y; vThreadIDInGroup.z <- tid.z
                //
                #line 17 "C:\Users\DXTsT\Documents\My Games\Terraria\tModLoader\ModSources\Everglow\Sources\Commons\Function\GPUDriven\Dusts\Shaders\SDFTile.fx"
                itof r0.xy, l(-8, -8, 0, 0)
                itof r0.zw, l(0, 0, 8, -8)
                itof r1.xy, l(24, -8, 0, 0)
                itof r1.zw, l(0, 0, -8, 8)
                itof r2.xy, l(8, 8, 0, 0)
                itof r2.zw, l(0, 0, 24, 8)
                itof r3.xy, l(-8, 24, 0, 0)
                itof r3.zw, l(0, 0, 8, 24)
                itof r4.xy, l(24, 24, 0, 0)
                mov x0[0].xy, r0.xyxx
                mov x0[1].xy, r0.zwzz
                mov x0[2].xy, r1.xyxx
                mov x0[3].xy, r1.zwzz
                mov x0[4].xy, r2.xyxx
                mov x0[5].xy, r2.zwzz
                mov x0[6].xy, r3.xyxx
                mov x0[7].xy, r3.zwzz
                mov x0[8].xy, r4.xyxx
                
                #line 48
                mov r0.x, l(0)
                ieq r0.x, r0.x, vThreadIDInGroup.x
                mov r0.y, l(0)
                ieq r0.y, r0.y, vThreadIDInGroup.y
                and r0.x, r0.y, r0.x
                if_nz r0.x
                
                #line 50
                  mov r0.xy, vThreadGroupID.xyxx  // r0.x <- tileMapCoord.x; r0.y <- tileMapCoord.y
                
                #line 51
                  mov r0.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t0.yzxw
                  itof r0.w, l(0)
                  lt r0.z, r0.w, r0.z
                  store_raw g1.x, l(0), r0.z
                
                #line 52
                  store_raw g2.x, l(0), l(-1)
                
                #line 53
                  mov r0.z, l(-1)  // r0.z <- i
                  mov r0.w, r0.z  // r0.w <- i
                  loop 
                    ige r1.x, l(1), r0.w
                    breakc_z r1.x
                
                #line 55
                    mov r1.x, l(-1)  // r1.x <- j
                    mov r2.x, r1.x  // r2.x <- j
                    loop 
                      ige r1.y, l(1), r2.x
                      breakc_z r1.y
                
                #line 57
                      iadd r1.y, r0.w, l(1)
                      imul null, r1.y, r1.y, l(3)
                      iadd r1.z, r2.x, l(1)
                      iadd r1.y, r1.z, r1.y  // r1.y <- id
                
                #line 58
                      mov r2.y, r0.w
                      iadd r3.xy, r0.xyxx, r2.xyxx  // r3.x <- tileCoord.x; r3.y <- tileCoord.y
                
                #line 59
                      mov r1.z, l(0)
                      store_structured g0.x, r1.y, l(0), r1.z
                
                #line 60
                      ilt r1.z, r3.x, l(0)
                      itof r1.w, r3.x
                      ge r1.w, r1.w, cb0[0].x
                      or r1.z, r1.w, r1.z
                      ilt r1.w, r3.y, l(0)
                      or r1.z, r1.w, r1.z
                      itof r1.w, r3.y
                      ge r1.w, r1.w, cb0[0].y
                      or r1.z, r1.w, r1.z
                      if_nz r1.z
                
                #line 62
                        iadd r2.x, r2.x, l(1)
                        continue 
                
                #line 63
                      endif 
                
                #line 64
                      mov r3.zw, l(0,0,0,0)
                      ld_indexable(texture2d)(float,float,float,float) r1.z, r3.xyzw, t0.yzxw
                      itof r1.w, l(0)
                      lt r1.z, r1.w, r1.z
                      if_nz r1.z
                
                #line 66
                        mov r1.z, l(1)
                        store_structured g0.x, r1.y, l(0), r1.z
                
                #line 67
                        store_raw g2.x, l(0), l(0)
                
                #line 68
                      endif 
                
                #line 55
                      iadd r2.x, r2.x, l(1)
                
                #line 69
                    endloop 
                
                #line 70
                    iadd r0.w, r0.w, l(1)
                  endloop 
                
                #line 71
                endif 
                
                #line 72
                sync_g_t
                
                #line 75
                ld_raw r0.x, l(0), g1.xxxx
                if_nz r0.x
                
                #line 77
                  itof r0.xyz, l(32, 32, 32, 0)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z
                
                #line 78
                  mov r0.w, l(0)  // r0.w <- i
                  mov r1.yz, r0.yyzy  // r1.y <- result.y; r1.z <- result.z
                  mov r1.x, r0.x  // r1.x <- result.x
                  mov r1.w, r0.w  // r1.w <- i
                  loop 
                    ilt r2.x, r1.w, l(9)
                    breakc_z r2.x
                
                #line 80
                    ld_structured r2.x, r1.w, l(0), g0.xxxx
                    mov r2.y, l(1)
                    ine r2.x, r2.y, r2.x
                    if_nz r2.x
                
                #line 82
                      nop 
                      utof r2.xy, vThreadIDInGroup.xyxx
                      add r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
                      mov r2.zw, x0[r1.w + 0].xxxy
                      mov r2.zw, -r2.zzzw
                      add r2.xy, r2.zwzz, r2.xyxx
                      mov r2.zw, l(0,0,8.000000,8.000000)
                
                #line 37
                      mov r3.xy, -r2.xyxx
                      max r3.xy, r2.xyxx, r3.xyxx
                      mov r2.zw, -r2.zzzw
                      add r2.zw, r2.zzzw, r3.xxxy  // r2.z <- w.x; r2.w <- w.y
                
                #line 38
                      lt r2.x, r2.x, l(0.000000)
                      movc r2.x, r2.x, l(-1), l(1)
                      lt r2.y, r2.y, l(0.000000)
                      movc r2.y, r2.y, l(-1), l(1)
                      itof r3.y, r2.x  // r3.y <- s.x
                      itof r3.z, r2.y  // r3.z <- s.y
                
                #line 39
                      max r2.x, r2.w, r2.z  // r2.x <- g
                
                #line 40
                      max r3.xw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // r3.x <- q.x; r3.w <- q.y
                
                #line 41
                      dp2 r2.y, r3.xwxx, r3.xwxx
                      sqrt r2.y, r2.y  // r2.y <- l
                
                #line 42
                      lt r4.x, l(0.000000), r2.x
                      movc r4.x, r4.x, r2.y, r2.x  // r4.x <- <sdgBox return value>.x
                      lt r2.x, l(0.000000), r2.x
                      div r3.xw, r3.xxxw, r2.yyyy
                      lt r2.y, r2.w, r2.z
                      itof r2.zw, l(0, 0, 1, 0)
                      itof r5.xy, l(0, 1, 0, 0)
                      movc r2.yz, r2.yyyy, r2.zzwz, r5.xxyx
                      movc r2.xy, r2.xxxx, r3.xwxx, r2.yzyy
                      mul r4.yz, r2.xxyx, r3.yyzy  // r4.y <- <sdgBox return value>.y; r4.z <- <sdgBox return value>.z
                
                #line 82
                      mov r4.xyz, r4.xyzx  // r4.x <- sdfgd.x; r4.y <- sdfgd.y; r4.z <- sdfgd.z
                
                #line 83
                      lt r2.x, r4.x, r1.x
                      if_nz r2.x
                
                #line 85
                        mov r1.xyz, r4.xyzx
                
                #line 86
                      endif 
                
                #line 87
                    endif 
                
                #line 88
                    iadd r1.w, r1.w, l(1)
                  endloop 
                
                #line 89
                  mov r0.xyz, -r1.xyzx
                  itof r0.w, l(0)
                  store_uav_typed u0.xyzw, vThreadID.xyyy, r0.xyzw
                
                #line 90
                else 
                
                #line 91
                  ld_raw r0.x, l(0), g2.xxxx
                  if_nz r0.x
                
                #line 93
                    itof r0.xyzw, l(16, 0, 0, 0)
                    store_uav_typed u0.xyzw, vThreadID.xyyy, r0.xyzw
                
                #line 94
                  else 
                
                #line 97
                    itof r0.xyz, l(32, 32, 32, 0)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z
                
                #line 98
                    mov r0.w, l(0)  // r0.w <- i
                    mov r1.yz, r0.yyzy  // r1.y <- result.y; r1.z <- result.z
                    mov r1.x, r0.x  // r1.x <- result.x
                    mov r2.x, r0.w  // r2.x <- i
                    loop 
                      ilt r2.y, r2.x, l(9)
                      breakc_z r2.y
                
                #line 100
                      ld_structured r2.y, r2.x, l(0), g0.xxxx
                      if_nz r2.y
                
                #line 102
                        nop 
                        utof r2.yz, vThreadIDInGroup.xxyx
                        add r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
                        mov r3.xy, x0[r2.x + 0].xyxx
                        mov r3.xy, -r3.xyxx
                        add r2.yz, r2.yyzy, r3.xxyx
                        mov r3.xy, l(8.000000,8.000000,0,0)
                
                #line 37
                        mov r3.zw, -r2.yyyz
                        max r3.zw, r2.yyyz, r3.zzzw
                        mov r3.xy, -r3.xyxx
                        add r3.xy, r3.xyxx, r3.zwzz  // r3.x <- w.x; r3.y <- w.y
                
                #line 38
                        lt r2.y, r2.y, l(0.000000)
                        movc r2.y, r2.y, l(-1), l(1)
                        lt r2.z, r2.z, l(0.000000)
                        movc r2.z, r2.z, l(-1), l(1)
                        itof r4.y, r2.y  // r4.y <- s.x
                        itof r4.z, r2.z  // r4.z <- s.y
                
                #line 39
                        max r2.y, r3.y, r3.x  // r2.y <- g
                
                #line 40
                        max r2.zw, r3.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)  // r2.z <- q.x; r2.w <- q.y
                
                #line 41
                        dp2 r3.z, r2.zwzz, r2.zwzz
                        sqrt r3.z, r3.z  // r3.z <- l
                
                #line 42
                        lt r3.w, l(0.000000), r2.y
                        movc r5.x, r3.w, r3.z, r2.y  // r5.x <- <sdgBox return value>.x
                        lt r2.y, l(0.000000), r2.y
                        div r2.zw, r2.zzzw, r3.zzzz
                        lt r3.x, r3.y, r3.x
                        itof r3.yz, l(0, 1, 0, 0)
                        itof r4.xw, l(0, 0, 0, 1)
                        movc r3.xy, r3.xxxx, r3.yzyy, r4.xwxx
                        movc r2.yz, r2.yyyy, r2.zzwz, r3.xxyx
                        mul r5.yz, r2.yyzy, r4.yyzy  // r5.y <- <sdgBox return value>.y; r5.z <- <sdgBox return value>.z
                
                #line 102
                        mov r5.xyz, r5.xyzx  // r5.x <- sdfgd.x; r5.y <- sdfgd.y; r5.z <- sdfgd.z
                
                #line 103
                        lt r2.y, r5.x, r1.x
                        if_nz r2.y
                
                #line 105
                          mov r1.xyz, r5.xyzx
                
                #line 106
                        endif 
                
                #line 107
                      endif 
                
                #line 108
                      iadd r2.x, r2.x, l(1)
                    endloop 
                
                #line 109
                    itof r1.w, l(0)
                    store_uav_typed u0.xyzw, vThreadID.xyyy, r1.xyzw
                
                #line 110
                  endif 
                endif 
                
                #line 111
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

}

